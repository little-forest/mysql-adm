#!/bin/bash
#===============================================================================
# mysql-backup :
# Date    :  2016/09/18 Start
# Copyright: Original code by Yusuke Komori.
#                       Copyright (c) 2016. Yusuke Komori, All rights reserved.
#===============================================================================

SCRIPT_BASE=`echo $(cd $(dirname $0); pwd)`
SCRIPT_NAME=`basename $0`

#-------------------------------------------------------------------------------
# User Configuration -----------------------------------------------------------
MYSQL_ROOT_PASS=
BACKUP_BASE=/backup
MYSQLDUMP=/usr/bin/mysqldump
MYSQLSHOW=/usr/bin/mysqlshow
COMPRESS_PROG=/usr/bin/pigz
ARCHIVE_FILE_SUFFIX=.gz
DATE_FORMAT=+%Y%m%d
#-------------------------------------------------------------------------------

DUMP_OPT="--lock-all-tables --add-drop-database --add-drop-table"
DUMP_OPT_INFORMATION_SCHEMA=""
DUMP_OPT_MYSQL="--lock-all-tables --events"
TAR_OPT=c

#-------------------------------------------------------------------------------
#- common functions ------------------------------------------------------------

__setupcolor() { #{{{
  # Escape sequence
  ESC="\e["
  ESCEND=m
  C_OFF=${ESC}${ESCEND}

  # normal
  C_BLACK="${ESC}30${ESCEND}"
  C_RED="${ESC}31${ESCEND}"
  C_GREEN="${ESC}32${ESCEND}"
  C_YELLOW="${ESC}33${ESCEND}"
  C_BLUE="${ESC}34${ESCEND}"
  C_MAGENTA="${ESC}35${ESCEND}"
  C_CYAN="${ESC}36${ESCEND}"
  C_WHITE="${ESC}37${ESCEND}"

  RES_COL=72
  MOVE_TO_COL="echo -en \\033[${RES_COL}G"
}
#}}}

__syslog() { #{{{
  # syslog へログを出力します。
  #  引数を指定しない場合は、標準入力からの読み取り結果をログ出力します。
  #
  # 【環境変数】LOG_TAG            タグ
  #             LOG_FACILITY(任意) ファシリティ(省略時はuser)
  #             SCRIPT_NAME (任意) スクリプト名
  # 【引数】 $1:ログメッセージ
  #          $2:ログレベル(省略可, 省略時は info)

  [[ -n "${DRY_RUN}" ]] && return 
  [ ! "$SCRIPT_NAME" ] && local SCRIPT_NAME=`basename $0`
  if [ "$LOG_TAG" ]; then
    local TAG="${LOG_TAG}/${SCRIPT_NAME}"
  else
    local TAG="${SCRIPT_NAME}"
  fi

  local FACILITY=user
  [[ "$LOG_FACILITY" ]] && FACILITY=$LOG_FACILITY

  local LOG_LEVEL=info
  [[ "$2" ]] && LOG_LEVEL="$2"

  if [[ "$1" ]]; then
    logger -t "$TAG" -p "${FACILITY}.${LOG_LEVEL}" "$1"
  else
    local OLDIFS="$IFS"
    IFS=
    while read LOG_LINE; do
      logger -t "$TAG" -p "${FACILITY}.${LOG_LEVEL}" "$LOG_LINE"
    done
    IFS="$OLDIFS"
  fi
}
#}}}

__show_ok() { #{{{
  [ "${SILENT_MODE}" ] && return
  [[ "$1" && "$1" -gt 0 ]] && local RES_COL="$1" || local RES_COL="${RES_COL}"
  echo -en "\\033[${RES_COL}G"
  echo -en "[ ${C_GREEN}OK${C_OFF}"
  [ "$2" ] && echo " ]$2" || echo " ]"
}
#}}}

__show_failed() { #{{{
  [ "${SILENT_MODE}" ] && return
  [[ "$1" && "$1" -gt 0 ]] && local RES_COL="$1" || local RES_COL="${RES_COL}"
  echo -en "\\033[${RES_COL}G"
  echo -en "[ ${C_RED}FAILED${C_OFF}"
  [ "$2" ] && echo " ]$2" || echo " ]"
}
#}}}

__show_info() { #{{{
  [[ -n "${SILENT_MODE}" ]] && return
  [[ "$1" == "-n" ]] && echo -en "${C_CYAN}${2}${C_OFF}" || echo -e "${C_CYAN}${1}${C_OFF}"
}
#}}}

__show_warn() { #{{{
  echo -e "[${C_YELLOW}WARN${C_OFF}]  $1"
}
#}}}

__show_error() { #{{{
  echo -e "[${C_RED}ERROR${C_OFF}] $1"
}
#}}}

__error_end() { #{{{
  __show_error "$1"; exit 1
}
#}}}

__prepare_dir() { #{{{
  local DIR="$1"
  if [[ ! -d "$DIR" ]]; then
    mkdir -p "$DIR"
    [[ ! -d "$DIR" ]] && return 1
    return 0
  fi
  return 0
}
#}}}


#-------------------------------------------------------------------------------
#- functions -------------------------------------------------------------------

# usage
#{{{
_usage() {
  [ "$1" ] && __show_error "$1"
  echo -e "${C_CYAN}usege :${C_OFF} $SCRIPT_NAME [--SILENT] [-h] [-d] -c CONF_FILE"
  cat <<EOM
  OPTIONS
    --SILENT will not display messages (for batch job)
    -c       specify configuration file path
    -d       dry run
    -h       show this help
  
  CONFIGURATIONS
    MYSQL_ROOT_PASS=**********   # required
    BACKUP_BASE=/backup
    MYSQLDUMP=/usr/bin/mysqldump
    MYSQLSHOW=/usr/bin/mysqlshow
    COMPRESS_PROG=/usr/bin/pigz
    ARCHIVE_FILE_SUFFIX=.gz
    DATE_FORMAT=+%Y%m%d
EOM
  exit 1
}
#}}}

#-------------------------------------------------------------------------------
#- Main process ----------------------------------------------------------------
#-------------------------------------------------------------------------------
[[ ! "$NO_COLOR" ]] && __setupcolor

#- Get options -----------------------------------------------------------------
[[ "$1" = "--SILENT" ]] && SILENT_MODE=yes && shift
while getopts c:dh OPT; do
  case "$OPT" in
    c) CONF_FILE=$OPTARG
      ;;
    d) DRY_RUN=yes
      ;;
    h|\?) _usage
      ;;
  esac
done
shift `expr $OPTIND - 1`

#- Load configuration file -----------------------------------------------------
[[ ! "$CONF_FILE" ]] && __error_end "Configuration file path is not specified."
if [[ -f "$CONF_FILE" ]]; then
  . "${CONF_FILE}"
  __syslog "Configuration file loaded. : `readlink -f $CONF_FILE`"
else
  __error_end "File not found. : $CONF_FILE"
fi

#- Check options ---------------------------------------------------------------
if [[ ! "$MYSQL_ROOT_PASS" ]]; then
  echo -e "${C_RED}An environmental valiable MYSQL_ROOT_PASS is not set.${C_OFF}"
  echo ''
  _usage
fi
if [[ ! -x "$COMPRESS_PROG" ]]; then
  __show_warn "$COMPRESS_PROG is not found. Use gzip."
  COMPRESS_PROG=""
  TAR_OPT="z${TAR_OPT}"
  ARCHIVE_FILE_SUFFIX=.gz
fi
TAR_OPT="${TAR_OPT}f"
ARCHIVE_FILE=$BACKUP_BASE/mysql/"mysql-`date "$DATE_FORMAT"`.tar${ARCHIVE_FILE_SUFFIX}"

#- Main process ----------------------------------------------------------------
[[ "$DRY_RUN" ]] && __show_info "[DRY-RUN]"

__syslog "Backup start."
__show_info "Backup start."

__prepare_dir `dirname $ARCHIVE_FILE` || __error_end "Unable to create directory"

DUMP_STATUS=0

[[ ! "$DRY_RUN" ]] && BACKUP_TMP_DIR=`mktemp -d`

# Dump each databases
for DBNAME in `${MYSQLSHOW} -u root -p${MYSQL_ROOT_PASS} | tail -n +4 | sed -e '$d' | awk '{print $2}'`; do
   BACKUP_SQL=${BACKUP_TMP_DIR}/${DBNAME}.sql
   OPT=$DUMP_OPT

   [ "$DBNAME" == "mysql" ] && OPT=$DUMP_OPT_MYSQL

   echo -n "  Backup $DBNAME to $BACKUP_SQL ..."
   if [[ ! "$DRY_RUN" ]]; then
     ${MYSQLDUMP} -u root -p${MYSQL_ROOT_PASS} ${OPT} ${DBNAME} > ${BACKUP_SQL}
     if [ $? ]; then
       # check file size
       SIZE=`ls -l $BACKUP_SQL | awk '{print $5}'`
       if [ $SIZE -ge 0 ]; then
         __syslog "  Dump $DBNAME successful."
         __show_ok
       else
         __show_failed
         __syslog "  Dump $DBNAME failed."
         DUMP_STATUS=1
       fi
     else
       __show_failed
       __syslog "  Dump $DBNAME failed."
       DUMP_STATUS=1
     fi
   else
     echo ""
   fi
done

# When dry-run mode exit here
if [[ "$DRY_RUN" ]]; then
  __show_info -n "[DRY-RUN]"
  echo " Will be archived : tar ${TAR_OPT} ${ARCHIVE_FILE} --use-compress-prog=${COMPRESS_PROG} *.sql"
  exit 0
fi

if [[ $DUMP_STATUS -eq 1 ]]; then
  rm -rf $BACKUP_TMP_DIR
  __error_end "Failed to dump databases."
fi

# Archive
pushd $BACKUP_TMP_DIR > /dev/null
__syslog "  Archiving... : $ARCHIVE_FILE"
echo "  Archiving... : $ARCHIVE_FILE"
tar ${TAR_OPT} ${ARCHIVE_FILE} --use-compress-prog=${COMPRESS_PROG} *.sql
popd > /dev/null

rm -rf $BACKUP_TMP_DIR

if [[ -e $ARCHIVE_FILE ]]; then
  __show_info "Backup was successfully completed. :${ARCHIVE_FILE}"
  __syslog "Backup was successfully completed. :${ARCHIVE_FILE}"
  exit 0
else
  __show_error "Backup failed. :${ARCHIVE_FILE}"
  __syslog "Backup failed. :${ARCHIVE_FILE}"
  exit 1
fi

# vim: ts=2 sw=2 sts=2 et nu foldmethod=marker
